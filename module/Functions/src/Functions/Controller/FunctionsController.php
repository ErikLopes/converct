<?php namespace Functions\Controller; use Zend\Mvc\Controller\AbstractActionController,    Doctrine\ORM\EntityManager,    Zend\Authentication\AuthenticationService;  require_once( "./vendor/hybridauth/hybridauth/hybridauth/Hybrid/Auth.php" );class FunctionsController extends AbstractActionController{    /**     * @var Doctrine\ORM\EntityManager     */    protected $em;    protected $social = array();  # sera usado futuramente            function __construct() {        $this->social = ("facebook");    }    public function setEntityManager(EntityManager $em)    {        $this->em = $em;    }     public function getEntityManager()    {        if (null === $this->em) {            $this->em = $this->getServiceLocator()->get('Doctrine\ORM\EntityManager');        }        return $this->em;    }     public function indexAction() {        parent::indexAction();    }     public function getAuthenticate($providerId)    {           try{            $config = $this->getConfigAuthenticate();            $hybridauth = new \Hybrid_Auth( $config );            $adapter = $hybridauth->authenticate($providerId);                    }catch(\Exception $e){            error_log("Erro na autenticação: ". $e->getMessage());        }                    return $adapter;            }        private function getConfigAuthenticate(){        return include ('./vendor/hybridauth/hybridauth/hybridauth/config.php');    }        public function getWithAuthenticate($providerId){        try{            $config = $this->getConfigAuthenticate();            $hybridauth = new \Hybrid_Auth( $config );            $adpter = $hybridauth->isConnectedWith($providerId);        } catch (Exception $e) {            error_log("Erro na identificação de autenticação: ".$e->getMessage());        }                return $adpter;    }    public function getHybridauth(){        $config = $this->getConfigAuthenticate();        return new \Hybrid_Auth($config);    }        public function validAuthentication($redirect){        $user_profile = $this->getWithAuthenticate("Facebook");             /*          *  Se o usuario não estiver autenticado pelo facebook ou pelo zfcuser,         *  sera redirecionado para a pagina inicial do site        */        $auth = new AuthenticationService();                if (! $user_profile ||  !$auth->hasIdentity()){           $redirect->toRoute("application");         }            } }